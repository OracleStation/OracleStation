import requests, dateutil.parser, sys, html, re
from requests.auth import HTTPBasicAuth
from copy import deepcopy

if len(sys.argv) < 2:
	print("Usage: python3 pull_changelogs.py <path/to/.all_changelog.yml> <GitHub Username> <GitHub Access Token>")
	sys.exit(0)

issue_url = "https://api.github.com/repos/OracleStation/OracleStation/pulls?state=closed&page="

data_structure = {}

def parse_issue(pull_request):

	body_split = pull_request["body"].split(":cl:")
	if(len(body_split) != 3):
		return

	date = dateutil.parser.parse(pull_request["merged_at"])
	date_str = "{0}-{1}-{2}:".format(str(date.year).zfill(4), str(date.month).zfill(2), str(date.day).zfill(2))

	if date_str not in data_structure:
		data_structure[date_str] = {}

	body_full = body_split[1][:-1]

	changes = body_full.split("\n")
	author = changes.pop(0).strip()
	if (len(author) < 2):
		author = pull_request["user"]["login"]
	author_str = "  {0}:".format(author)

	if author_str not in data_structure[date_str]:
		data_structure[date_str][author_str] = []

	for change in changes:
		change_split = change.split(":")
		if (len(change_split) < 2):
			continue

		change_tag = change_split[0].strip()
		change_label = ":".join(change_split[1:]).strip()

		change_label = html.escape(change_label) # XSS
		change_label = re.sub(r'[^\x00-\x7f]',r'', change_label) #Remove emoji
		change_label = change_label.replace("'", "\"") # Quoting

		change_str = "  - {0}: '{1}'".format(change_tag, change_label)
		data_structure[date_str][author_str].append(change_str)

page = 1
while(True):
	print("Pulling page {0}...".format(page))
	response = requests.get(issue_url + str(page), auth=HTTPBasicAuth(sys.argv[2], sys.argv[3]))
	if(response.status_code != 200):
		break

	empty = True

	for pull_request in response.json():

		empty = False

		if(pull_request["merged_at"] != None):
			try:
				parse_issue(pull_request)
			except:
				print("Error parsing PR #" + str(pull_request["number"]))

	if (empty):
		break

	page += 1

# Sanitize
for date, authors in data_structure.items():
	copied_authors = deepcopy(authors)
	for author, changes in copied_authors.items():
		if len(changes) < 1:
			authors.pop(author)

copied_data = deepcopy(data_structure)
for date, authors in copied_data.items():
	if len(authors) < 1:
		data_structure.pop(date)

# Output
with open(sys.argv[1], 'w') as output:
	output.write("DO NOT EDIT THIS FILE BY HAND!  AUTOMATICALLY GENERATED BY ss13_genchangelog.py.\n")
	output.write("---\n")
	for date, authors in data_structure.items():
		output.write(date + "\n")
		for author, changes in authors.items():
			output.write(author + "\n")
			for change in changes:
				output.write(change + "\n")
	output.write("\n")
